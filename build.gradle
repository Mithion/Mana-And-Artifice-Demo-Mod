buildscript {
    repositories {
        mavenCentral()
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = 'https://files.minecraftforge.net/maven' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

plugins {
    id 'com.github.gmazzo.buildconfig' version '3.0.1'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply from: 'https://raw.githubusercontent.com/LordGrimmauld/gitinfo-collect/master/build.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
// apply plugin: 'eclipse'
// apply plugin: 'idea'

// Modify these variables in gradle.properties
group = "${groupbase}.${modid}"
version = "${minecraft_version}-${mod_version}"

java {
    archivesBaseName = modid
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') +
    '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
println("Building ${group} version ${project.version}")

minecraft {
    // Mappings (official or parchment) is a matter of preference. Parchment does map some method parameters though
    // while keeping Class-/Method-/Fieldnames same as official.
    // mappings channel: "official", version: "${minecraft_version}"
    // https://ldtteam.jfrog.io/ui/native/parchmentmc-public/org/parchmentmc/data/parchment-1.18.2/

    mappings channel: 'parchment', version: "${parchment_version}-${minecraft_version}"

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            args '--debug', '--stacktrace', '--scan'
            property 'forge.logging.markers', "${forge_logging_markers}"
            property 'forge.logging.console.level', "${forge_logging_console_level}"

            mods {
                "${modid}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('server')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            args '--debug', '--stacktrace', '--scan'
            property 'forge.logging.markers', "${forge_logging_markers}"
            property 'forge.logging.console.level', "${forge_logging_console_level}"

            mods {
                "${modid}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.logging.markers', "${forge_logging_markers}"
            property 'forge.logging.console.level', "${forge_logging_console_level}"

            args '--mod', modid, '--all', '--output', file('src/generated/resources/'), '--existing',
                file('src/main/resources/')

            mods {
                "${modid}" {
                    source sourceSets.main
                }
            }
        }
    }
}

configurations {
    library
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url 'https://maven.manaandartifice.com/releases/'
    }
    maven {
        url 'https://maven.theillusivec4.top/'
    }
    maven {
        url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
    // compileOnly "com.mithion:mna:${mna_api_version}:api" //api, compilation only
    compileOnly "com.mithion:mna:${mna_version}:api" //api, compilation only
    runtimeOnly fg.deobf("com.mithion:mna:${mna_version}") //mod itself, deobf for runtime


    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${minecraft_version}-${curios_version}")
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${minecraft_version}-${curios_version}:api")

    implementation fg.deobf('software.bernie.geckolib:geckolib-forge-1.18:3.0.57')

}

compileJava.options.encoding = 'UTF-8'

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                'Specification-Title'     : modid,
                'Specification-Vendor'    : author,
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.version,
                'Implementation-Vendor'   : author,
                'Implementation-Timestamp': new Date().format('yyyy-MM-dd\'T\'HH:mm:ssZ'),
                'MixinConfigs'            : "${modid}.mixins.json"
        ])
    }
    archiveClassifier.set('slim')
}

def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}

jar.finalizedBy('reobfJar')

// This will create a file in generated/source/buildConfig/main/main/<group as dirs>/BuildConfig.java
// You can import this using `import <group>.BuildConfig` and reference these fields from java
buildConfig {
    buildConfigField 'String', 'MODID', "\"${modid}\""
    buildConfigField 'String', 'VERSION', "\"${project.version}\""
    buildConfigField 'String', 'DISPLAY_NAME', "\"${display_name}\""
    buildConfigField 'String', 'GITHASH', "\"${getGitInfo()}\""

    version = project.version
    packageName = project.group
}
